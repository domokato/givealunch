{"version":3,"sources":["webpack:///./src/components/restaurant-list/RestaurantList.jsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/container/Container.tsx","webpack:///./src/components/row/Row.tsx","webpack:///./src/components/intro/Intro.tsx"],"names":["RestaurantList","_ref","restaurants","pageSize","_React$useState","React","pageView","setPageView","showButton","length","react","slice","map","restaurant","index","key","get","href","target","className","s","button","onClick","p","base","Airtable","apiKey","RestaurantSearch","query","setQuery","_React$useState2","records","setRecords","handleSubmit","e","preventDefault","select","maxRecords","view","filterByFormula","toLowerCase","eachPage","results","fetchNextPage","element","document","getElementById","scrollIntoView","err","console","error","search","onSubmit","input","type","onChange","currentTarget","value","placeholder","id","cooking","components_restaurant_list_RestaurantList","x","toString","__webpack_exports__","data","Helmet_default","a","title","Intro","callout","subtext","centered","pages_RestaurantSearch","__webpack_require__","d","Container","react__WEBPACK_IMPORTED_MODULE_0__","_Container_scss__WEBPACK_IMPORTED_MODULE_1__","_Container_scss__WEBPACK_IMPORTED_MODULE_1___default","n","children","container","Row","row","Intro_Intro","intro","Row_Row","intro__col","intro__text"],"mappings":"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","file":"component---src-pages-index-tsx-3f06d07de0e79a3107e9.js","sourcesContent":["import * as React from 'react';\n\nimport s from './RestaurantList.scss';\n\nexport const RestaurantList = ({ restaurants, pageSize }) => {\n  const [pageView, setPageView] = React.useState(1);\n  const showButton = restaurants.length > (pageSize*pageView);\n  const handleLoadMore = () => {\n    setPageView(p => p + 1);\n  }\n  const renderRestaurants = () => {\n    return restaurants.slice(0, pageView * pageSize).map((restaurant, index) => (\n    <>\n      <a key={`${restaurant.get('Restaurant Name')} ${restaurant.get('City')}`} href={restaurant.get('Link')} target=\"_blank\" className={s.restaurant}>\n        <strong>{restaurant.get('Restaurant Name')}</strong> is feeding <strong>{restaurant.get('Who are they helping')}</strong> in {restaurant.get('City')}.\n      </a><br />\n     </>\n    ));\n  };\n\n  return (\n    <>\n      {renderRestaurants()}\n      {showButton && (\n        <button className={s.button} onClick={handleLoadMore}>Show more</button>\n      )}\n    </>\n  );\n};\n\nexport default RestaurantList;\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport Airtable from 'airtable';\n\nimport { Intro } from 'components/intro/Intro';\nimport RestaurantList from 'components/restaurant-list/RestaurantList';\n\nimport s from './index.scss';\n\nconst readOnlyApiKey = 'key2a9aPpR6jDvtau';\nconst appId = 'appKoO9jQuqptnJNk';\nconst base = new Airtable({ apiKey: readOnlyApiKey }).base(appId);\n\nconst RestaurantSearch = () => {\n  // tslint:disable-next-line:no-shadowed-variable\n  const [query, setQuery]: [\n    string,\n    React.Dispatch<React.SetStateAction<string>>\n  ] = React.useState('');\n  const [records, setRecords] = React.useState([]);\n  const handleChange = (e: any) => {\n    setQuery(e.currentTarget.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    base('Restaurants')\n      .select({\n        // Selecting the first 3 records in Grid view:\n        maxRecords: 100,\n        view: 'Grid view',\n        filterByFormula: `OR(FIND(\"${query.toLowerCase()}\", LOWER({Who are they helping})), FIND(\"${query.toLowerCase()}\", LOWER(City)))`,\n      })\n      .eachPage(\n        function page(results: [any], fetchNextPage: () => any) {\n          // This function (`page`) will get called for each page of records.\n\n          setRecords(results);\n          const element = document.getElementById('results');\n          if (element) {\n            element.scrollIntoView();\n          }\n\n          // To fetch the next page of records, call `fetchNextPage`.\n          // If there are more records, `page` will get called again.\n          // If there are no more records, `done` will get called.\n          fetchNextPage();\n        },\n        function done(err: any) {\n          if (err) {\n            console.error(err);\n            return;\n          }\n        }\n      );\n  };\n\n  return (\n    <>\n      <form className={s.search} onSubmit={handleSubmit}>\n        <input\n          className={s.input}\n          type=\"text\"\n          onChange={handleChange}\n          value={query}\n          placeholder=\"Find a city or hospital\"\n        />\n        <button className={s.button} onClick={handleSubmit}>\n          Find it\n        </button>\n      </form>\n      {records.length > 0 && (\n        <div id=\"results\">\n          <h2 className={s.cooking}>Who's cooking near you?</h2>\n          <RestaurantList\n            key={records.map((x) => x.get('Restaurant Name')).toString()}\n            pageSize={5}\n            restaurants={records}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ({ data }: { data: any }) => (\n  <>\n    <Helmet title=\"Home\" />\n    <Intro>\n      Working from home? Might as well\n      <br />\n      <h1 className={s.callout}>Give your lunch money</h1>\n      <br />\n      <p className={s.subtext}>\n        Donate your lunch money to a local restaurant cooking meals for hospital\n        workers.\n      </p>\n    </Intro>\n    <div className={s.centered}>\n      <RestaurantSearch />\n    </div>\n  </>\n);\n\nexport const query = graphql`\n  query HomePage {\n    allAirtable(filter: { table: { eq: \"Restaurants\" } }) {\n      edges {\n        node {\n          data {\n            Restaurant_Name\n            Who_are_they_helping\n            Link\n            Group_They_Are_Supporting\n            Added_By\n            City\n            State\n            Country\n          }\n        }\n      }\n    }\n  }\n`;\n","import * as React from 'react';\n\nimport s from './Container.scss';\n\ninterface IContainerProps {\n  children: React.ReactNode;\n}\n\nexport const Container = ({ children }: IContainerProps) => (\n  <section className={s.container}>\n    {children}\n  </section>\n);\n","import * as React from 'react';\n\nimport s from './Row.scss';\n\ninterface IRowProps {\n  children: React.ReactNode;\n}\n\nexport const Row = ({ children }: IRowProps) => (\n  <div className={s.row}>\n    {children}\n  </div>\n);\n","import * as React from 'react';\n\nimport { Container } from 'components/container/Container';\nimport { Row } from 'components/row/Row';\n\nimport s from './Intro.scss';\n\ninterface IIntroProps {\n  children: React.ReactNode;\n}\n\nexport const Intro = ({ children }: IIntroProps) => {\n  return (\n    <Container>\n      <div className={s.intro}>\n        <Row>\n          <div className={s.intro__col}>\n            <p className={s.intro__text}>\n              {children}\n            </p>\n          </div>\n        </Row>\n      </div>\n    </Container>\n  );\n};\n"],"sourceRoot":""}